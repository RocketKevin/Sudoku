{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["valueBoard","verifyRow","rowToVerify","rowSet","col","add","parseInt","size","possibleSudoKuValue","has","verifyCol","colToVerify","colSet","row","verifySubgrid","subgridToVerify","subgridSet","Set","colStartingPoint","rowStartingPoint","Math","floor","stateOfWorld","document","readyState","i","getElementById","value","console","log","index","verifyColBox","verifyRowBox","verifySubgridBox","clear","verifySolution","webReload","window","location","reload","Square","props","state","inputValue","val","this","displayValue","whichClass","celliD","type","class","id","maxlength","onChange","event","setState","target","replace","React","Component","Board","iD","num","position","returnRow","returnCol","randomNumber","y","x","oneOfTheNumberInThreeByThreeBlock","randomPositionOfBoard","random","length","positionAndValue","push","backup","positionAndAllPossibleNumbers","oneSetOfPossibleNumbers","j","isPossibleRow","isPossibleCol","isPossibleBlock","returnBlock","allPossibleNumbers","tempBoard","possibleNumbers","onOrOff","getPossibleNumberInThisSquares","a","possibleNumber","cheapSolver","removeRandomNumber","getPossibleNumberInEmptySquares","isUnique","possibleNumberBoard","randomNumberOfArray","indexOf","splice","indexOne","board","positionGenerator","safelyRemoveNumbers","renderSquare","className","Box","text","box","onClick","close","open","Button","e","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0NAIIA,G,MAAa,IAQjB,SAASC,EAAUC,EAAaC,GAK9B,IAJA,IAISC,EAAM,EAAGA,EAJL,EAImBA,IAC9BD,EAAOE,IAAIC,SAASN,EAAyB,EAAdE,EAAkBE,KAInD,GARqB,IAQjBD,EAAOI,KACT,OAAO,EAIT,IAAK,IAAIC,EAAsB,EAAGA,GAbb,EAaoDA,IACvE,IAAwC,IAApCL,EAAOM,IAAID,GACb,OAAO,EAGX,OAAO,EAST,SAASE,EAAUC,EAAaC,GAK9B,IAJA,IAISC,EAAM,EAAGA,EAJL,EAImBA,IAC9BD,EAAOP,IAAIC,SAASN,EAAiB,EAANa,EAAUF,KAI3C,GARqB,IAQjBC,EAAOL,KACT,OAAO,EAIT,IAAK,IAAIC,EAAsB,EAAGA,GAbb,EAaoDA,IACvE,IAAwC,IAApCI,EAAOH,IAAID,GACb,OAAO,EAGX,OAAO,EAaT,SAASM,EAAcC,EAAiBH,GAMtC,IALA,IAAII,EAAa,IAAIC,IACjBC,EAAoBH,EAAkB,EAAK,EAC3CI,EAAmBC,KAAKC,MAAMN,EAAkB,GAG3CF,EAAwB,EAAjBM,EAAqBN,EAAM,EAAsB,EAAjBM,EAAqBN,IACnE,IAAK,IAAIT,EAAMc,EAAkBd,EAAM,EAAIc,EAAkBd,IAC3DY,EAAWX,IAAIC,SAASN,EAAiB,EAANa,EAAUT,KAKjD,GADqB,IACjBQ,EAAOL,KACT,OAAO,EAIT,IAAK,IAAIC,EAAsB,EAAGA,GANb,EAMoDA,IACvE,IAAwC,IAApCI,EAAOH,IAAID,GACb,OAAO,EAGX,OAAO,EA8BT,SAASc,IACP,GAA2B,aAAxBC,SAASC,WAA2B,CACrC,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACrBzB,EAAWyB,GAAKF,SAASG,eAAeD,GAAGE,MAE7CC,QAAQC,IAAI,QAGd,OAAwB,IA5B1B,WAKE,IAHA,IAAIjB,EAAS,IAAIK,IACbd,EAAS,IAAIc,IAERa,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtC,IAAIC,EAAerB,EAAUoB,EAAOlB,GAChCoB,EAAe/B,EAAU6B,EAAO3B,GAChC8B,EAAmBnB,EAAcgB,EAAOlB,GAI5C,GAFAA,EAAOsB,QACP/B,EAAO+B,SACc,IAAjBF,IAA2C,IAAjBD,IAA+C,IAArBE,EACtD,OAAO,EAIX,OAAO,EAWJE,GAML,SAASC,IACPC,OAAOC,SAASC,S,IAIZC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,IAHG,E,qDAMT,IAAD,OAGHC,EAAMC,KAAKJ,MAAMK,aACjBC,EAAa,SAqBjB,OAnBG3B,KAAKC,MAAMwB,KAAKJ,MAAMO,OAAS,GAAK,IAAM,IAC3CD,GAAc,QAEb3B,KAAKC,MAAMwB,KAAKJ,MAAMO,OAAS,GAAK,IAAM,IAC3CD,GAAc,WAEbF,KAAKJ,MAAMO,OAAS,IAAM,IAC3BD,GAAc,SAEbF,KAAKJ,MAAMO,OAAS,IAAM,IAC3BD,GAAc,UAIgB,IAA5BF,KAAKJ,MAAMK,eACbF,EAAMC,KAAKH,MAAMC,WACjBI,GAAc,SAMd,2BACEE,KAAK,GACLC,MAAOH,EACPI,GAAIN,KAAKJ,MAAMO,OAGfI,UAAU,IAGVzB,MACEiB,EAIFS,SAAU,SAAAC,GAAK,OAAI,EAAKC,SAAS,CAAEZ,WAAYW,EAAME,OAAO7B,MAAM8B,QAAQ,KAAM,a,GAjDnEC,IAAMC,WAwDrBC,E,2KAGSC,EAAIC,GACf,OAAO,kBAAC,EAAD,CACLd,OAAUa,EACVf,aAAgBgB,M,gCAMVC,GACR,OAAO3C,KAAKC,MAAM0C,EAAW,K,gCAIrBA,GACR,OAAOA,EAAW,I,kCAIRA,GACV,OAAkD,EAA3C3C,KAAKC,MAAMwB,KAAKmB,UAAUD,GAAY,GAAS3C,KAAKC,MAAMwB,KAAKoB,UAAUF,GAAY,K,oCAIhFG,EAAcC,EAAGnE,GAC7B,IAAK,IAAIyB,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAInB,SAASN,EAAe,EAAJmE,EAAQ1C,MAAQyC,EACtC,OAAO,EAGX,OAAO,I,oCAIKA,EAAcE,EAAGpE,GAC7B,IAAK,IAAIyB,EAAI,EAAGA,EAAI,EAAGA,IACrB,GAAInB,SAASN,EAAe,EAAJyB,EAAQ2C,MAAQF,EACtC,OAAO,EAGX,OAAO,I,sCAIOA,EAAcH,EAAU/D,GAGtC,IAAK,IAAIyB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI4C,EAA+D,GAA3BjD,KAAKC,MAAM0C,EAAW,GAAUtC,EAAI,EAAI,EAAIL,KAAKC,MAAMI,EAAI,GAAUsC,EAAW,EAAhB,EAGxG,GAAIzD,SAASN,EAAWqE,MAAwCH,EAC9D,OAAO,EAGX,OAAO,I,yCAIUlE,GAQjB,IALA,IAAIsE,EAAwBlD,KAAKC,MAAMD,KAAKmD,SAAWvE,EAAWwE,QAE9DC,EAAmB,GAG+B,IAAhDnE,SAASN,EAAWsE,KAExBA,EAAwBlD,KAAKC,MAAMD,KAAKmD,SAAWvE,EAAWwE,QAWhE,OAPAC,EAAiBC,KAAKJ,GACtBG,EAAiBC,KAAK1E,EAAWsE,IAGjCtE,EAAWsE,GAAyB,EAG7BG,I,sDAGuBzE,EAAY2E,GAG1C,IAFA,IAAIC,EAAgC,GAChCC,EAA0B,GACtBpD,EAAI,EAAGA,EAAIkD,EAAOH,OAAQ/C,IAAK,CACrC,IAAI,IAAIqD,EAAI,EAAGA,EAAI,GAAIA,IAEjBjC,KAAKkC,cAAcD,EAAGjC,KAAKmB,UAAUW,EAAOlD,IAAKzB,IACjD6C,KAAKmC,cAAcF,EAAGjC,KAAKoB,UAAUU,EAAOlD,IAAKzB,IACjD6C,KAAKoC,gBAAgBH,EAAGjC,KAAKqC,YAAYP,EAAOlD,IAAKzB,IAEvD6E,EAAwBH,KAAKI,GAIjCF,EAA8BF,KAAK,CAACC,EAAOlD,GAAIoD,IAE/CA,EAA0B,GAE5B,OAAOD,I,qDAGsB5E,EAAY8B,GAEzC,IADA,IAAIqD,EAAqB,GACjBL,EAAI,EAAGA,EAAI,GAAIA,IACjBjC,KAAKkC,cAAcD,EAAGjC,KAAKmB,UAAUlC,GAAQ9B,IAC7C6C,KAAKmC,cAAcF,EAAGjC,KAAKoB,UAAUnC,GAAQ9B,IAC7C6C,KAAKoC,gBAAgBH,EAAGjC,KAAKqC,YAAYpD,GAAQ9B,IAEnDmF,EAAmBT,KAAKI,GAG5B,OAAOK,I,kCAIGnF,GAIV,IAHA,IAAIoF,EAAY,GACZC,EAAkB,GAClBC,EAAU,EACI,IAAZA,GAAe,CACnBA,EAAU,EACV,IAAI,IAAI7D,EAAI,EAAGA,EAAI,GAAIA,IAErB,GADA2D,EAAU3D,GAAKzB,EAAWyB,GACN,IAAjB2D,EAAU3D,GAAU,CAErB,GAA8B,KAD9B4D,EAAkBxC,KAAK0C,+BAA+BvF,EAAYyB,IAC/C+C,OAEZ,OAAGa,EAAgBb,QACjB,EAFPY,EAAU3D,GAAKnB,SAAS+E,GAU9B,IADA,IAAIG,EAAI,EACFA,EAAI,IACY,IAAjBJ,EAAUI,KACXF,EAAU,GAEZE,IAGJ,OAAO,I,+BAGAxF,EAAYyF,GAEnB,IAAI,IAAIhE,EAAI,EAAGA,EAAIgE,EAAejB,OAAQ/C,IACtC,GAAGgE,EAAehE,GAAG,GAAG+C,OAAS,EAE7B,IAAI,IAAIM,EAAI,EAAGA,EAAIW,EAAehE,GAAG,GAAG+C,OAAQM,IAAK,CAKnD,GAHA9E,EAAWyF,EAAehE,GAAG,IAAMgE,EAAehE,GAAG,GAAGqD,GAGrDjC,KAAK6C,YAAY1F,GAElB,OADAA,EAAWyF,EAAehE,GAAG,IAAM,GAC5B,EAGTzB,EAAWyF,EAAehE,GAAG,IAAM,EAS7C,OAAO,I,0CAGWzB,GAIlB,IAHA,IAAI2E,EAAS,GACTU,EAAkB,GAClBvD,EAAQ,EACNA,EAAQ,IAEZ6C,EAAS9B,KAAK8C,mBAAmB3F,GAEjCqF,EAAkBxC,KAAK+C,gCAAgC5F,EAAY2E,GAGhE9B,KAAKgD,SAAS7F,EAAYqF,GAC3BvD,IAEA9B,EAAW2E,EAAO,IAAMA,EAAO,GAKnC,OAAO,I,wCAKSlD,EAAGqE,EAAqB9F,GAExC,GAAsC,IAAlC8F,EAAoBrE,GAAG+C,OASzB,OANAsB,EAAoBrE,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAElDzB,EAAWyB,GAAK,EAChBzB,EAAWyB,EAAI,GAAK,GAGZ,EAIR,IAAIsE,EAAsBD,EAAoBrE,GAAGL,KAAKC,MAAMD,KAAKmD,SAAWuB,EAAoBrE,GAAG+C,SAGnG,GACE3B,KAAKkC,cAAcgB,EAAqBlD,KAAKmB,UAAUvC,GAAIzB,IAC3D6C,KAAKmC,cAAce,EAAqBlD,KAAKoB,UAAUxC,GAAIzB,IAC3D6C,KAAKoC,gBAAgBc,EAAqBlD,KAAKqC,YAAYzD,GAAIzB,GAC/D,CAGAA,EAAWyB,GAAK,CAACsE,GACjB,IAAIjE,EAAQgE,EAAoBrE,GAAGuE,QAAQD,GAM3C,OALIjE,GAAS,GACXgE,EAAoBrE,GAAGwE,OAAOnE,EAAO,GAIhC,EAIP,IAAIoE,EAAWJ,EAAoBrE,GAAGuE,QAAQD,GAQ9C,OAPIG,GAAY,GACdJ,EAAoBrE,GAAGwE,OAAOC,EAAU,GAG1ClG,EAAWyB,GAAK,EAGT,I,+BAcX,IALA,IAAI0E,EAAQ,GAGRL,EAAsB,GAElBrE,EAAI,EAAGA,EAAI,GAAIA,IACrBqE,EAAoBpB,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAC1C1E,EAAW0E,KAAK,GAKlB,IAFA,IAAI5C,EAAQ,EAENA,EAAQ,IAAI,CAGhB,IAAIiC,EAAWlB,KAAKuD,kBAAkBtE,EAAOgE,EAAqB9F,GAGlE,KAFe8B,EAAQiC,GAEP,GAKd,MAFAjC,GAASiC,EAOblB,KAAKwD,oBAAoBrG,GAGzB,IAAK,IAAIyB,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIqD,EAAI,EAAGA,EAAI,EAAGA,IACrBqB,EAAMzB,KACJ,6BACG7B,KAAKyD,aAAkB,EAAJ7E,EAAQqD,EAAI9E,EAAe,EAAJyB,EAAQqD,MAM3D,OACE,yBAAKyB,UAAU,aACZJ,O,GA3SWzC,IAAMC,WAiTpB6C,E,uKAGF,IAAIC,EAAO,qCAERnF,MACDmF,EAAO,WAGT,IAAIC,EACF,yBAAKvD,GAAG,UACN,6BACGsD,GAEH,4BAAQtD,GAAG,QAAQwD,QAAW9D,KAAKJ,MAAMmE,OAAzC,UAUJ,OAJI/D,KAAKJ,MAAMoE,OACbH,EAAM,MAIN,6BACGA,O,GA1BShD,IAAMC,WAgClBmD,E,4MAEJpE,MAAQ,CACNmE,MAAM,G,uDAGE,IAAD,OACP,OACE,6BACE,4BAAQ1D,GAAG,SAASwD,QAAS,SAACI,GAAD,OAAO,EAAKxD,SAAS,CAACsD,MAAM,MAAzD,UAGA,4BAAQF,QAASvE,GAAjB,YAGA,kBAAC,EAAD,CAAKyE,KAAQhE,KAAKH,MAAMmE,KAAMD,MAAS,SAACG,GAAD,OAAO,EAAKxD,SAAS,CAACsD,MAAM,Y,GAftDnD,IAAMC,WA6CZqD,E,uKApBX,OACE,yBAAKT,UAAU,OAEb,wBAAIpD,GAAG,SAAP,WAIA,yBAAKoD,UAAU,cACb,kBAAC,EAAD,OAGF,6BACE,kBAAC,EAAD,Y,GAhBQ7C,IAAMC,WCpiBJsD,QACW,cAA7B5E,OAAOC,SAAS4E,UAEe,UAA7B7E,OAAOC,SAAS4E,UAEhB7E,OAAOC,SAAS4E,SAASC,MACvB,2DCZNC,IAASC,OACP,yBAAKd,UAAU,aACb,kBAAC,EAAD,OAEFhF,SAASG,eAAe,SDyHpB,kBAAmB4F,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjG,QAAQiG,MAAMA,EAAMC,a","file":"static/js/main.d772de2b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n//Holds one true value\r\nlet valueBoard = [];\r\n\r\n/*\r\n* This method checks the solutions for the specified row. \r\n* Returns true if valid row, false otherwise\r\n*\r\n* @param rowToVerify is an integer number, board is a 2D array representing Sudoku board\r\n*/\r\nfunction verifyRow(rowToVerify, rowSet) {\r\n  var numCol = 9;\r\n  var maxSudokuValue = 9;\r\n  // console.log(\"True\");\r\n  //add values of board into Set\r\n  for (var col = 0; col < numCol; col++) {\r\n    rowSet.add(parseInt(valueBoard[rowToVerify * 9 + col]));\r\n  }\r\n\r\n  //should have 9 values in row\r\n  if (rowSet.size !== maxSudokuValue) {\r\n    return false;\r\n  }\r\n\r\n  // check if all possible values 1-9 are all in rowSet\r\n  for (var possibleSudoKuValue = 1; possibleSudoKuValue <= maxSudokuValue; possibleSudoKuValue++) {\r\n    if (rowSet.has(possibleSudoKuValue) === false) {\r\n      return false;\r\n    }\r\n  }\r\n  return true; //we've check that all numbers 1-9 are in the row\r\n}\r\n\r\n/*\r\n* This method checks the solutions for the specified col. \r\n* Returns true if valid col, false otherwise\r\n*\r\n* @param rowToVerify is an integer number, board is a 2D array representing Sudoku board\r\n*/\r\nfunction verifyCol(colToVerify, colSet) {\r\n  var numRow = 9;\r\n  var maxSudokuValue = 9;\r\n  // console.log(\"True\");\r\n  //add values of board into Set\r\n  for (var row = 0; row < numRow; row++) {\r\n    colSet.add(parseInt(valueBoard[row * 9 + colToVerify]));\r\n  }\r\n\r\n  //should have 9 values in row\r\n  if (colSet.size !== maxSudokuValue) {\r\n    return false;\r\n  }\r\n\r\n  // check if all possible values 1-9 are all in colSet\r\n  for (var possibleSudoKuValue = 1; possibleSudoKuValue <= maxSudokuValue; possibleSudoKuValue++) {\r\n    if (colSet.has(possibleSudoKuValue) === false) {\r\n      return false;\r\n    }\r\n  }\r\n  return true; //we've check that all numbers 1-9 are in the col\r\n}\r\n\r\n/*\r\n* This method checks the solutions for the specified subgrid. \r\n* Returns true if valid subgrid, false otherwise. Subgrids are numbered\r\n* \r\n* 0 1 2\r\n* 3 4 5\r\n* 6 7 8\r\n*\r\n* @param subgridToVerify is an integer number, board is a 2D array representing Sudoku board\r\n*/\r\nfunction verifySubgrid(subgridToVerify, colSet) {\r\n  let subgridSet = new Set();\r\n  var colStartingPoint = (subgridToVerify % 3) * 3;\r\n  var rowStartingPoint = Math.floor(subgridToVerify / 3); //using integer division\r\n  //subgrid for first row\r\n\r\n  for (var row = (rowStartingPoint*3); row < 3 + (rowStartingPoint*3); row++) {\r\n    for (var col = colStartingPoint; col < 3 + colStartingPoint; col++) {\r\n      subgridSet.add(parseInt(valueBoard[row * 9 + col]));\r\n    }\r\n  }\r\n\r\n  var maxSudokuValue = 9;\r\n  if (colSet.size !== maxSudokuValue) {\r\n    return false;\r\n  }\r\n\r\n  // check if all possible values 1-9 are all in colSet\r\n  for (var possibleSudoKuValue = 1; possibleSudoKuValue <= maxSudokuValue; possibleSudoKuValue++) {\r\n    if (colSet.has(possibleSudoKuValue) === false) {\r\n      return false;\r\n    }\r\n  }\r\n  return true; //we've check that all numbers 1-9 are in the col\r\n  \r\n}\r\n\r\n/*\r\n* This method checks if the board in the parameter is a valid solution\r\n* by checking whether each row, collumn, and subgrid are valid.\r\n* Method returns false if the board violates any Sudoku mechanics, \r\n* true otherwise. \r\n*/\r\nfunction verifySolution() {\r\n  \r\n  let colSet = new Set(); //create new set to store values of col\r\n  let rowSet = new Set(); //create new set to store values of row\r\n\r\n  for (var index = 0; index < 9; index++) {\r\n    let verifyColBox = verifyCol(index, colSet, rowSet);\r\n    let verifyRowBox = verifyRow(index, rowSet);    \r\n    let verifySubgridBox = verifySubgrid(index, colSet);\r\n\r\n    colSet.clear();\r\n    rowSet.clear();\r\n    if (verifyRowBox === false || verifyColBox === false || verifySubgridBox === false) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction stateOfWorld() {\r\n  if(document.readyState === \"complete\") {\r\n    for(let i = 0; i < 81; i++) {\r\n      valueBoard[i] = document.getElementById(i).value;\r\n    }\r\n    console.log(\"True\");\r\n  }\r\n\r\n  if(verifySolution() === true) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction webReload() {\r\n  window.location.reload();\r\n}\r\n\r\n//Making individual squares\r\nclass Square extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: '',\r\n    };\r\n  }\r\n  render() {\r\n\r\n    //Get variables from outside\r\n    let val = this.props.displayValue;\r\n    let whichClass = \"square\";\r\n\r\n    if(Math.floor(this.props.celliD / 9) % 3 === 0) {\r\n      whichClass += \" top\";\r\n    } \r\n    if(Math.floor(this.props.celliD / 9) % 3 === 2) {\r\n      whichClass += \" bottom\";\r\n    } \r\n    if(this.props.celliD % 3 === 0) {\r\n      whichClass += \" left\";\r\n    } \r\n    if(this.props.celliD % 3 === 2) {\r\n      whichClass += \" right\";\r\n    }\r\n\r\n    //If there is no value, player can enter value\r\n    if (this.props.displayValue === 0) {\r\n      val = this.state.inputValue;\r\n      whichClass += \" zero\";\r\n    }\r\n\r\n    return (\r\n\r\n      //Each square is an input box \r\n      <input\r\n        type=\"\"\r\n        class={whichClass}\r\n        id={this.props.celliD}\r\n\r\n        //Only one letter, number, or character\r\n        maxlength=\"1\"\r\n\r\n        //Where value is kept\r\n        value={\r\n          val\r\n        }\r\n\r\n        //Only number can be type\r\n        onChange={event => this.setState({ inputValue: event.target.value.replace(/\\D/, '') })}\r\n      >\r\n      </input>\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  \r\n  //Create a square\r\n  renderSquare(iD, num) {\r\n    return <Square\r\n      celliD = {iD} \r\n      displayValue = {num}\r\n\r\n    />;\r\n  }\r\n  \r\n  // given a sudoku position, returns the row\r\n  returnRow(position) {\r\n    return Math.floor(position / 9);\r\n  }\r\n\r\n  // given a sudoku position, returns the column\r\n  returnCol(position) {\r\n    return position % 9;\r\n  }\r\n\r\n  //Gives 3 by 3 block\r\n  returnBlock(position) {\r\n    return Math.floor(this.returnRow(position) / 3) * 3 + Math.floor(this.returnCol(position) / 3);\r\n  }\r\n\r\n  //Check for conflict in row\r\n  isPossibleRow(randomNumber, y, valueBoard) {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (parseInt(valueBoard[y * 9 + i]) === randomNumber) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //Check for conflict in col\r\n  isPossibleCol(randomNumber, x, valueBoard) {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (parseInt(valueBoard[i * 9 + x]) === randomNumber) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //Checks 3 by 3 block\r\n  isPossibleBlock(randomNumber, position, valueBoard) {\r\n\r\n    //Iterate through the 3 by 3 block\r\n    for (let i = 0; i < 9; i++) {\r\n      let oneOfTheNumberInThreeByThreeBlock = Math.floor(position / 3) * 27 + i % 3 + 9 * Math.floor(i / 3) + 3 * (position % 3);\r\n\r\n      //If one of the number in 3 by 3 block is the same as the random number\r\n      if (parseInt(valueBoard[oneOfTheNumberInThreeByThreeBlock]) === randomNumber) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //Remove a random number from the board\r\n  removeRandomNumber(valueBoard) {\r\n\r\n    //Pick a random position o the board\r\n    let randomPositionOfBoard = Math.floor(Math.random() * valueBoard.length);\r\n\r\n    let positionAndValue = [];\r\n\r\n    //Change the random number if the position it's on was a zero\r\n    while(parseInt(valueBoard[randomPositionOfBoard]) === 0) {\r\n      //Reset random number\r\n      randomPositionOfBoard = Math.floor(Math.random() * valueBoard.length);\r\n    }\r\n  \r\n    //Back up position of board's value removed and it's number\r\n    positionAndValue.push(randomPositionOfBoard);\r\n    positionAndValue.push(valueBoard[randomPositionOfBoard]);\r\n  \r\n    //Set value of the random picked position to zero\r\n    valueBoard[randomPositionOfBoard] = 0;\r\n      \r\n    //Tell which position got their number removed and what number\r\n    return positionAndValue;\r\n  }\r\n\r\n  getPossibleNumberInEmptySquares(valueBoard, backup) {\r\n    let positionAndAllPossibleNumbers = [];\r\n    let oneSetOfPossibleNumbers = [];\r\n    for(let i = 0; i < backup.length; i++) {\r\n      for(let j = 1; j < 10; j++) {\r\n\r\n        if( this.isPossibleRow(j, this.returnRow(backup[i]), valueBoard) &&\r\n            this.isPossibleCol(j, this.returnCol(backup[i]), valueBoard) &&\r\n            this.isPossibleBlock(j, this.returnBlock(backup[i]), valueBoard)\r\n        ) {\r\n          oneSetOfPossibleNumbers.push(j);\r\n        }\r\n      }\r\n\r\n      positionAndAllPossibleNumbers.push([backup[i], oneSetOfPossibleNumbers]);\r\n\r\n      oneSetOfPossibleNumbers = [];\r\n    }\r\n    return positionAndAllPossibleNumbers;\r\n  }\r\n\r\n  getPossibleNumberInThisSquares(valueBoard, index) {\r\n    let allPossibleNumbers = [];\r\n    for(let j = 1; j < 10; j++) {\r\n      if( this.isPossibleRow(j, this.returnRow(index), valueBoard) &&\r\n          this.isPossibleCol(j, this.returnCol(index), valueBoard) &&\r\n          this.isPossibleBlock(j, this.returnBlock(index), valueBoard)\r\n      ) {\r\n        allPossibleNumbers.push(j);\r\n      }\r\n    }\r\n    return allPossibleNumbers;\r\n  }\r\n\r\n  //Temperary\r\n  cheapSolver(valueBoard) {\r\n    let tempBoard = [];\r\n    let possibleNumbers = [];\r\n    let onOrOff = 1;\r\n    while(onOrOff === 1) {\r\n      onOrOff = 0;\r\n      for(let i = 0; i < 81; i++) {\r\n        tempBoard[i] = valueBoard[i];\r\n        if(tempBoard[i] === 0) {\r\n          possibleNumbers = this.getPossibleNumberInThisSquares(valueBoard, i);\r\n          if(possibleNumbers.length === 1) {\r\n            tempBoard[i] = parseInt(possibleNumbers);\r\n          } else if(possibleNumbers.length === 0) {\r\n            return false;\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let a = 0\r\n      while(a < 81) {\r\n        if(tempBoard[a] === 0) {\r\n          onOrOff = 1;\r\n        }\r\n        a++;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isUnique(valueBoard, possibleNumber) {\r\n    //console.log(possibleNumber[2]);\r\n    for(let i = 0; i < possibleNumber.length; i++) {\r\n        if(possibleNumber[i][1].length > 1) {\r\n            //console.log(\"true\");\r\n            for(let j = 0; j < possibleNumber[i][1].length; j++) {\r\n              //console.log(possibleNumber[i][1][j]);\r\n              valueBoard[possibleNumber[i][0]] = possibleNumber[i][1][j];\r\n              \r\n              \r\n              if(this.cheapSolver(valueBoard)) {\r\n                valueBoard[possibleNumber[i][0]] = 0;\r\n                return false;\r\n              }\r\n              \r\n              valueBoard[possibleNumber[i][0]] = 0;\r\n            }\r\n\r\n            //If more than one, plug in the number\r\n            //Solve the board\r\n            //If solvable return false\r\n            //Remove number\r\n        }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  safelyRemoveNumbers(valueBoard) {\r\n    let backup = [];\r\n    let possibleNumbers = [];\r\n    let index = 0;\r\n    while(index < 15) {\r\n      //Remove number and obtain it's value and position\r\n      backup = this.removeRandomNumber(valueBoard);\r\n      //Find all possible answers for each cell\r\n      possibleNumbers = this.getPossibleNumberInEmptySquares(valueBoard, backup);\r\n      //Check unique \r\n\r\n      if(this.isUnique(valueBoard, possibleNumbers)) {\r\n        index++;\r\n      } else {\r\n        valueBoard[backup[0]] = backup[1];\r\n      }\r\n      //console.log(backup);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  //Return position of which square currently in, either moving back, forward, or stay. \r\n  //Change the possibleNumberBoard and valueBoard\r\n  positionGenerator(i, possibleNumberBoard, valueBoard) {\r\n\r\n    if (possibleNumberBoard[i].length === 0) {\r\n\r\n      //If there are no possble numbers left, refill\r\n      possibleNumberBoard[i] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n      valueBoard[i] = 0;\r\n      valueBoard[i - 1] = 0;\r\n\r\n      //Move backward by 1\r\n      return -1;\r\n    } else {\r\n\r\n      //Get a random number from array\r\n      let randomNumberOfArray = possibleNumberBoard[i][Math.floor(Math.random() * possibleNumberBoard[i].length)];\r\n\r\n      //Checks for confliction for row, col, and block\r\n      if(\r\n        this.isPossibleRow(randomNumberOfArray, this.returnRow(i), valueBoard) &&\r\n        this.isPossibleCol(randomNumberOfArray, this.returnCol(i), valueBoard) &&\r\n        this.isPossibleBlock(randomNumberOfArray, this.returnBlock(i), valueBoard)\r\n      ) {\r\n\r\n        //If no confliction use the random number\r\n        valueBoard[i] = [randomNumberOfArray];\r\n        let index = possibleNumberBoard[i].indexOf(randomNumberOfArray);\r\n        if (index >= 0) {\r\n          possibleNumberBoard[i].splice(index, 1);\r\n        }\r\n\r\n        //Move forward by 1\r\n        return 1;\r\n      } else {\r\n\r\n        //If conflicts, remove that possible number\r\n        let indexOne = possibleNumberBoard[i].indexOf(randomNumberOfArray);\r\n        if (indexOne >= 0) {\r\n          possibleNumberBoard[i].splice(indexOne, 1);\r\n        }\r\n\r\n        valueBoard[i] = 0;\r\n\r\n        //If it conflicts, stay\r\n        return 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  render() {\r\n\r\n    //For display\r\n    let board = [];\r\n\r\n    //Holds possible values of a square\r\n    let possibleNumberBoard = [];\r\n\r\n    for(let i = 0; i < 81; i++) {\r\n      possibleNumberBoard.push([1,2,3,4,5,6,7,8,9]);\r\n      valueBoard.push(0);\r\n    }\r\n\r\n    let index = 0;\r\n\r\n    while(index < 81) {\r\n\r\n      //Get new postion of index\r\n      let position = this.positionGenerator(index, possibleNumberBoard, valueBoard);\r\n      let precheck = index + position;\r\n\r\n      if (precheck >= 0) {\r\n\r\n        //Where index is at\r\n        index += position;\r\n      } else {\r\n        break;\r\n      }\r\n\r\n    }\r\n\r\n    this.safelyRemoveNumbers(valueBoard);\r\n\r\n    //Store all into board\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        board.push(\r\n          <div>\r\n            {this.renderSquare((i * 9 + j), valueBoard[i * 9 + j])}\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"gameBoard\">\r\n        {board}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Box extends React.Component {\r\n  render() {\r\n\r\n    let text = \"Something isn't right. Keep going!\";\r\n\r\n    if(stateOfWorld()) {\r\n      text = \"You Win\";\r\n    }\r\n\r\n    let box = (\r\n      <div id=\"dialog\">\r\n        <div>\r\n          {text}\r\n        </div>\r\n        <button id=\"close\" onClick = {this.props.close}>\r\n          Close\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n    if(!this.props.open) {\r\n      box = null;\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        {box}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Button extends React.Component {\r\n\r\n  state = {\r\n    open: false\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <button id=\"submit\" onClick={(e) => this.setState({open: true})}>\r\n          Submit\r\n        </button>\r\n        <button onClick={webReload}>\r\n          New Game\r\n        </button>\r\n        <Box open = {this.state.open} close = {(e) => this.setState({open: false})}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <h1 id=\"title\">\r\n          Sudoku!\r\n        </h1>\r\n\r\n        <div className=\"game-board\">\r\n          <Board />\r\n        </div>\r\n\r\n        <div>\r\n          <Button />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div className=\"container\">\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}